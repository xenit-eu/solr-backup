plugins {
    id 'java'
    id 'idea'
}

dependencies {
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "io.rest-assured:json-path:${restAssuredVersion}"
    testImplementation "io.rest-assured:rest-assured-common:${restAssuredVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testRuntimeOnly "org.glassfish.jaxb:jaxb-runtime:${jaxBVersion}"
}

test {
    enabled = false
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eu.xenit.docker'
    apply plugin: 'eu.xenit.docker-compose.auto'
    apply from: "${project.projectDir}/overload.gradle"

    description = "Solr ${flavor} with backup"

    configurations {
        amazonSdkCore
        amazonSdkS3
        backupJar
    }

    dependencies {
        amazonSdkCore group: 'com.amazonaws', name: 'aws-java-sdk-core', version: '1.12.32', ext: 'jar'
        amazonSdkS3 group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.32', ext: 'jar'

        backupJar project(path: ":solr-backup")
    }


    task integrationTest(type: Test, group: "verification") {
        useJUnitPlatform()
        testClassesDirs = project.parent.sourceSets.test.output.classesDirs
        classpath = project.parent.sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }
    }


    createDockerFile {
        from "${solrBaseImage}"

        dependsOn(configurations.backupJar)

        if (flavor == "solr6") {
            smartCopy "${project.parent.projectDir}/src/test/resources/solr.xml", "/opt/alfresco-search-services/solrhome/solr.xml"
            smartCopy configurations.backupJar, "/opt/alfresco-search-services/solrhome/lib/"
            smartCopy configurations.amazonSdkCore.singleFile, "/opt/alfresco-search-services/solrhome/lib/"
            smartCopy configurations.amazonSdkS3.singleFile, "/opt/alfresco-search-services/solrhome/lib/"
        }
    }

    dockerCompose {
        environment.put 'ALFRESCO_IMAGE', project.alfrescoimage
        useComposeFiles = [
                "${project.parent.projectDir}/src/test/resources/compose/docker-compose.yml"
        ]
        isRequiredBy(project.tasks.integrationTest)
    }
}
